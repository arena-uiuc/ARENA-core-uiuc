{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/trackRecorder.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n        this._faceExpressions = {\n            happy: 0,\n            neutral: 0,\n            surprised: 0,\n            angry: 0,\n            fearful: 0,\n            disgusted: 0,\n            sad: 0\n        };\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face expressions of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceExpressions() {\n        return this._faceExpressions;\n    }\n\n    /**\n     * Sets the face expressions of the user.\n     *\n     * @param {Object} faceExpressions - object with face expressions.\n     * @returns {void}\n     */\n    setFaceExpressions(faceExpressions) {\n        this._faceExpressions = faceExpressions;\n    }\n\n    /**\n     * Adds a new face expression to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceExpression(faceExpression, duration) {\n        this._faceExpressions[faceExpression] += duration;\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED = 'rtc.lastn_endpoint_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Event fired when JVB sends notification about interrupted/restored user's\n     * ICE connection status or we detect local problem with the video track.\n     * First argument is the ID of the participant and\n     * the seconds is a string indicating if the connection is currently\n     * - active - the connection is active\n     * - inactive - the connection is inactive, was intentionally interrupted by\n     * the bridge\n     * - interrupted - a network problem occurred\n     * - restoring - the connection was inactive and is restoring now\n     *\n     * The current status value can be obtained by calling\n     * JitsiParticipant.getConnectionStatus().\n     */\n    PARTICIPANT_CONN_STATUS_CHANGED = 'conference.participant_conn_status_changed',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * A new face landmark object is added for a participant\n     */\n    FACE_LANDMARK_ADDED = 'conference.face_landmark.added',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTICIPANT_CONN_STATUS_CHANGED = JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const FACE_LANDMARK_ADDED = JitsiConferenceEvents.FACE_LANDMARK_ADDED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The presenter type.\n     */\n    PRESENTER = 'presenter',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR,\n        () => {\n            conference.xmpp.connection.emuc.doLeave(conference.room.roomjid);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed'\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link ParticipantConnectionStatus.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n         * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n         * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds.\n         */\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return Boolean(this._identity?.user?.['hidden-from-recorder']);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeyReady(this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this._conf.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport browser from '../browser';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\n\n        // For Chromium, check if Unified plan is enabled.\n        this._usesUnifiedPlan = browser.supportsUnifiedPlan()\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ?? true));\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSupportEnabled() {\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            this._rooms = payload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, payload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = this.options.conference?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        elem.c(\n            'property', {\n                name: 'rtcstatsEnabled',\n                value: rtcstatsEnabled\n            }).up();\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests, enableCallStats } = this.options.conference;\n    const callstatsDisabled = !callStatsID || !callStatsSecret || !enableCallStats\n\n        // Even though AppID and AppSecret may be specified, the integration\n        // of callstats.io may be disabled because of globally-disallowed\n        // requests to any third parties.\n        || disableThirdPartyRequests === true;\n\n    // since the default is true across all the server-side components, only signal if false.\n    if (callstatsDisabled) {\n        elem.c(\n            'property', {\n                name: 'callstatsEnabled',\n                value: !callstatsDisabled\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n            this.connection.emuc.doLeave(this.roomjid);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        }));\n\n        return Promise.allSettled(promises);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {Mediatype} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","import { getLogger } from '@jitsi/logger';\nimport async from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED = 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                if (ssrcElement.hasAttribute('name')) {\n                    const sourceName = ssrcElement.getAttribute('name');\n\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n                }\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n                },\n                error => {\n                    failure(error);\n\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            videoTracks.length && videoTracks.splice(0, 1);\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => {\n                    if (videoTracks.length) {\n                        return this.addTracks(videoTracks);\n                    }\n\n                    return Promise.resolve();\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    const workFunction = finishedCallback => {\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                        // the local endpoint is the offerer and starts muted.\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        return this._responderRenegotiate(remoteDescription)\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                    };\n\n                    logger.debug(`${this} Queued responderRenegotiate task`);\n                    this.modificationQueue.push(\n                        workFunction,\n                        error => {\n                            if (error) {\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\n                            } else {\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\n                            }\n                        });\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            videoTracks.length && videoTracks.splice(0, 1);\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (videoTracks.length) {\n                        return this.addTracks(videoTracks);\n                    }\n\n                    return Promise.resolve();\n                })\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && FeatureFlags.isSourceNameSignalingEnabled()\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n            // Add transceivers by adding a new mline in the remote description for each track.\n            for (const track of localTracks) {\n                remoteSdp.addMlineForNewLocalSource(track.getType());\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            logger.info('Source-name signaling is enabled');\n            this.caps.addFeature('http://jitsi.org/source-name');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress\n            || this.breakoutRoomsComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face expressions to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceExpressionEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceExpression', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            expression: payload.faceExpression,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress\n            || from === this.breakoutRoomsComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            logObject.id = 'deployment_info';\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        if (this.jvbPreferredCodec === CodecMimeType.VP9 && !browser.supportsVP9()) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && (peerCodec !== CodecMimeType.VP9 || browser.supportsVP9())) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     * @deprecated to be replaced with sendSourceVideoTypeMessage\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\n                    // video).\n                    const lastNEndpoints = obj.lastNEndpoints;\n\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n                }\n\n                break;\n            }\n            case 'ForwardedSources': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    // The new/latest list of forwarded sources\n                    const forwardedSources = obj.forwardedSources;\n\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n                }\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                    const { sourceName, maxHeight } = obj;\n\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\n                        // eslint-disable-next-line object-property-newline\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\n                        emitter.emit(\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\n                                sourceName,\n                                maxHeight\n                            }\n                        );\n                    } else {\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\n                    }\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\n                        // generates one (in p2p mode).\n                        streamId = `${this.localEndpointId}-${mediaType}`;\n\n                        // eslint-disable-next-line max-depth\n                        if (mediaType === MediaType.VIDEO) {\n                            // eslint-disable-next-line max-depth\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\n                            }\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\n                        }\n\n                        streamId = mediaType === MediaType.VIDEO\n                            ? this.videoSourcesToMsidMap.get(trackId)\n                            : this.audioSourcesToMsidMap.get(trackId);\n                    }\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists && trackId) {\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                trackIndex = streamId.split('-')[2];\n            }\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex)\n                });\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n\n    /**\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\n     *\n     * @param description\n     * @returns\n     */\n    mungeRemoteDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n\n        const session = transform.parse(description.sdp);\n\n        for (const media of session.media) {\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n\n            if (media.direction !== MediaDirection.SENDONLY) {\n                continue;\n            }\n\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\n                continue;\n            }\n\n            // Cache the SSRCs and the source groups.\n            const mungedSsrcs = new Set(media.ssrcs.slice());\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\n\n            // When simulcast and RTX are both enabled.\n            if (fidGroups.length && simGroup) {\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\n\n                for (const ssrcGroup of media.ssrcGroups) {\n                    if (ssrcGroup !== fidGroup) {\n                        mungedSsrcGroups.delete(ssrcGroup);\n                    }\n                }\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc\n                        && ssrc.id.toString() !== secondarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n\n            // When simulcast is enabled but RTX is disabled.\n            } else if (simGroup) {\n                mungedSsrcGroups.delete(simGroup);\n\n                for (const ssrc of media.ssrcs) {\n                    if (ssrc.id.toString() !== primarySsrc) {\n                        mungedSsrcs.delete(ssrc);\n                    }\n                }\n            }\n\n            media.ssrcs = Array.from(mungedSsrcs);\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\n        }\n\n        return new RTCSessionDescription ({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType, \n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=${\n            enteringForwardedSources} at ${timestamp}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set RTC mute timeout for: ${sourceName} of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._disposeTrackStreamingStatus();\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        const encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.high : encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? encodingBitrates.low : encodingBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const encodingsState = this.localStreamEncodingsConfig\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (this.pc.isSharingLowFpsScreen()\n                && localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const presenterEnabled = localVideoTrack._originalStream\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n\n        const encodingsBitrates = this.localStreamEncodingsConfig\n        .map(encoding => {\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\n\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\n                // otherwise.\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\n            && this.pc.getLocalTracks(mediaType)?.length\n            && !oldTrack\n            && newTrack\n            && !newTrack.conference;\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n                && t.currentDirection === MediaDirection.INACTIVE);\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\n\n                if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n\n        if (!transceiver) {\n            return Promise.reject(new Error('replace track failed'));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'.\n                // When multi-stream is enabled, there can be multiple transceivers with outbound streams.\n                if (idx < localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast.ts';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n\n    let sourceName;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n\n        // If source name was not signaled, we'll generate one which allows testing signaling\n        // when mixing legacy(mobile) with new clients.\n        if (!sourceName) {\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\n        }\n    }\n\n    // eslint-disable-next-line no-undef\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    // eslint-disable-next-line no-undef\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n        const existingTrack = Array.from(userTracksByMediaType)[0];\n\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId\n        && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute operation.\n *\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    logger.info(`${this} Adding track=${track} as unmute`);\n\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\n    // before the source signaling which is undesirable.\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\n    const isNewTrackScreenshare = !oldTrack\n        && newTrack?.getVideoType() === VideoType.DESKTOP\n        && FeatureFlags.isMultiStreamSupportEnabled();\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const stream = newTrack?.getOriginalStream();\n        const promise = newTrack && !stream\n\n            // Ignore cases when the track is replaced while the device is in a muted state.\n            // The track will be replaced again on the peerconnection when the user unmutes.\n            ? Promise.resolve()\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\n\n        return promise\n            .then(transceiver => {\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                // Force renegotiation only when the source is added for the first time.\n                return configureEncodingsPromise.then(() => negotiationNeeded);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrackMute', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrackMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrackMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType)?.[0];\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        if (localVideoTrack) {\n            return this.setSenderVideoConstraints(\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n                localVideoTrack);\n        }\n        const promises = [];\n\n        for (const track of this.getLocalVideoTracks()) {\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n        }\n\n        return Promise.allSettled(promises);\n    }\n\n    let localTrack = localVideoTrack;\n\n    if (!localTrack) {\n        localTrack = this.getLocalVideoTracks()[0];\n    }\n\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localDescription = this._mungeCodecOrder(localDescription);\n    }\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\n    } else {\n        this._senderVideoMaxHeight = frameHeight;\n    }\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    // Set the degradation preference.\n    const preference = this.isSharingLowFpsScreen()\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                // Max bitrates are configured on the encodings only for VP8.\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || this.isSharingLowFpsScreen()\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this.isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        /**\n         * The default video type assumed by the bridge.\n         * @deprecated this will go away with multiple streams support\n         * @type {BridgeVideoType}\n         * @private\n         */\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n                try {\n                    this._channel.sendVideoTypeMessage(this._videoType);\n                } catch (error) {\n                    logError(error, 'VideoTypeMessage', this._videoType);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            // Add forwarded sources change listener.\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n        }\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            Date.now());\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face_landmark';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === FACE_LANDMARK_MESSAGE_TYPE) {\n                    this.eventEmitter.emit(\n                        ConferenceEvents.FACE_LANDMARK_ADDED,\n                        participant.getId(),\n                        payload);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n        const isSourcesFormat = Object.keys(constraints).includes('onStageSources', 'selectedSources');\n\n        if (!FeatureFlags.isSourceNameSignalingEnabled() && isSourcesFormat) {\n            throw new Error(\n                '\"onStageSources\" and \"selectedSources\" are not supported when sourceNameSignaling is disabled.'\n            );\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled() && isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            for (const track of this._rtc.getLocalVideoTracks()) {\n                const sourceName = track.getSourceName();\n\n                sourceName && this._propagateSendMaxFrameHeight(sourceName);\n            }\n        } else {\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this._conference.getActiveMediaSession()) {\n                    this._configureConstraintsForLocalSources();\n                }\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const { maxHeight, sourceName } = videoConstraints;\n            const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n            for (const track of localVideoTracks) {\n                // Propagate the sender constraint only if it has changed.\n                if (track.getSourceName() === sourceName\n                    && (!this._sourceSenderConstraints.has(sourceName)\n                    || this._sourceSenderConstraints.get(sourceName) !== maxHeight)) {\n                    this._sourceSenderConstraints.set(sourceName, maxHeight);\n                    logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                    this._propagateSendMaxFrameHeight(sourceName);\n                }\n            }\n        } else if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n            this._senderVideoConstraints = videoConstraints;\n            this._propagateSendMaxFrameHeight();\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName = null) {\n        if (FeatureFlags.isSourceNameSignalingEnabled() && !sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : sourceName ? this._sourceSenderConstraints.get(sourceName) : this._senderVideoConstraints?.idealHeight\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            const promises = [];\n\n            for (const sourceName of this._sourceSenderConstraints.keys()) {\n                promises.push(this._propagateSendMaxFrameHeight(sourceName));\n            }\n\n            return Promise.allSettled(promises);\n        }\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.FACE_LANDMARK_ADDED,\n            this._onFaceLandmarkAdd.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data.faceExpression) {\n            savedUser.addFaceExpression(data.faceExpression, data.duration);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n\n            speakerStatsToUpdate.setFaceExpressions(newStats[userId].faceExpressions);\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._sourceInfoHandler\n                    && oldChatRoom.removePresenceListener(\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n                this._memberLeftHandler\n                    && oldChatRoom.removeEventListener(\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n            }\n        }\n        if (room) {\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                this._bindChatRoomEventHandlers(room);\n                this._addLocalSourceInfoToPresence();\n            } else {\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\n                //  the new impl has been tested well enough\n                // SignalingEvents\n                this._audioMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.AUDIO, node.value === 'true');\n                };\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n                this._videoMuteHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_MUTED_CHANGED,\n                        from, MediaType.VIDEO, node.value === 'true');\n                };\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n                this._videoTypeHandler = (node, from) => {\n                    this.eventEmitter.emit(\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                        from, node.value);\n                };\n                room.addPresenceListener('videoType', this._videoTypeHandler);\n            }\n        }\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        // SignalingEvents\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\n                    if (value === endpointId) {\n                        delete this._sourceNames[key];\n                    }\n                }\n            }\n        };\n\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Finds the first source of given media type for the given endpoint.\n     * @param endpointId\n     * @param mediaType\n     * @returns {SourceInfo|null}\n     * @private\n     */\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\n        const remoteSourceState = this._remoteSourceState[endpointId];\n\n        if (!remoteSourceState) {\n            return null;\n        }\n\n        for (const sourceInfo of Object.values(remoteSourceState)) {\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\n\n            if (_mediaType === mediaType) {\n                return sourceInfo;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.error('Requested peer media info, before room was set');\n        };\n        const lastPresence = this.chatRoom.getLastPresence(owner);\n\n        if (!lastPresence) {\n            throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\n        }\n\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\n                return legacyGetPeerMediaInfo();\n            }\n\n            if (sourceName) {\n                return this.getPeerSourceInfo(owner, sourceName);\n            }\n\n            /**\n             * @type {PeerMediaInfo}\n             */\n            const mediaInfo = {};\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\n\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\n            // no mediaType argument there.\n            if (mediaType === MediaType.AUDIO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n            } else if (mediaType === MediaType.VIDEO) {\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\n\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n                if (codecTypeNode.length > 0) {\n                    mediaInfo.codecType = codecTypeNode[0].value;\n                }\n            } else {\n                throw new Error(`Unsupported media type: ${mediaType}`);\n            }\n\n            return mediaInfo;\n        }\n\n        return legacyGetPeerMediaInfo();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\n            // signaling is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\n            // the legacy part is removed.\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n}\n","/* global $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\n            this._registerRtcListeners(this.rtc);\n        }\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Do not initialize ParticipantConnectionStatusHandler when source-name signaling is enabled.\n    if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for tuning\n                // up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n        this.participantConnectionStatus.init();\n    }\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('The conference is has been already left');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave();\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n        this.rtc.setVideoType(videoType);\n    }\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldTrack.isVideoTrack()) {\n        newTrack.setSourceName(oldTrack.getSourceName());\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\n\n                // we do not want to send presence update during setEffect switching, which does remove and then add\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        const videoTypeTagName = 'videoType';\n\n        // If track is missing we revert to default type Camera, the case where we screenshare and\n        // we return to be video muted.\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\n\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\n            // set the mute status.\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\n\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\n        }\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\n    // It won't be used anymore when multiple stream support is enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteChanged, videoMuteChanged;\n\n        if (!this.room) {\n            return false;\n        }\n\n        if (mediaType === MediaType.AUDIO) {\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\n        } else {\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\n        }\n\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Remove the ssrcs from the remote description and renegotiate.\n        session.removeRemoteStreamsOnLeave(id);\n    }\n\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n    tracksToBeRemoved.forEach(track => {\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    if (participant) {\n        delete this.participants[id];\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = this.getLocalTracks();\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = muteStatusChanged || videoTypeChanged;\n    }\n\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\n        let audioMuteStatusChanged, videoMuteStatusChanged;\n\n        if (!localAudioTracks?.length) {\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\n        }\n        if (!localVideoTracks?.length) {\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\n            videoTypeChanged = this._setNewVideoType();\n        }\n\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceExpressionEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport SignalingLayerImpl from '../xmpp/SignalingLayerImpl';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new SignalingLayerImpl();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Multi-stream is supported only on endpoints running in Unified plan mode and the flag to disable unified\n        // plan also needs to be taken into consideration.\n        if (typeof options.enableUnifiedOnChrome !== 'undefined' && options.flags) {\n            options.flags.enableUnifiedOnChrome = options.enableUnifiedOnChrome;\n        }\n\n        // Configure the feature flags.\n        FeatureFlags.init(options.flags || { });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","userId","displayName","isLocalStats","this","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","_faceExpressions","happy","neutral","surprised","angry","fearful","disgusted","sad","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFaceExpressions","setFaceExpressions","faceExpressions","addFaceExpression","faceExpression","duration","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","replace","EventEmitterForwarder","src","dest","addListener","emit","Error","prototype","forward","args","srcEvent","Function","bind","apply","handlers","oldOnErrorHandler","window","onerror","oldOnUnhandledRejection","onunhandledrejection","forEach","handler","event","reason","GlobalOnErrorHandler","addHandler","push","callErrorHandler","error","errHandler","callUnhandledRejectionHandler","randomInt","min","max","Math","floor","random","randomElement","arr","length","RandomUtil","randomHexDigit","randomHexString","len","ret","randomAlphanumStr","result","i","currentExecutingScript","require","ScriptUtil","loadScript","async","prepend","relativeURL","loadCallback","errorCallback","d","document","tagName","script","createElement","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","substring","lastIndexOf","onload","parentNode","insertBefore","appendChild","integerHash","string","char","hash","charCodeAt","pow","abs","names","generateUsername","Logger","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","Object","keys","levels","logLevel","_log","arguments","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","arg","ERROR","timestamp","prevMessage","prevMessageText","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","stack","split","m","match","substr","log","logger","level","Array","slice","call","disableCallerInfo","transports","concat","t","l","logPrefixes","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","grammar","v","name","reg","o","format","s","u","e","p","z","r","c","b","a","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","params","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","key","obj","parser","writer","write","parse","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","rawName","attachProperties","validLine","test","sdp","session","media","filter","type","rtp","fmtp","j","paramReducer","acc","expr","undefined","reduce","toString","map","candidates","parts","component","ip","port","item","stream","scid","paused","formatRegExp","formatStr","x","makeLine","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","iterator","_map","results","_keys","k","hasOwnProperty","process","nextTick","setImmediate","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","next","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","Uint8Array","code","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","create","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","assign","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","href","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","matches","url","ignoreMessage","round","_nearestExecutingScript","eligibleScripts","readyState","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","errorListener","resolver","eventTargetAgnosticAddListener","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","_addListener","events","existing","warning","newListener","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","message","context","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","size","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","blob","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","validAttribute","validCSS","style","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","attr","setAttribute","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","getAttribute","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","serialize","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","reset","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","firstChild","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","lang","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","idx","DNS","URL","rnds","_sha","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","delete","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","navigator","mozGetUserMedia","userAgent","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","supportsUnifiedPlan","RTCRtpTransceiver","val","compactObject","isEmptyObject","walkStats","stats","base","resultSet","endsWith","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","trackId","shimGetUserMedia","browserDetails","mediaDevices","constraintsToChrome_","mandatory","optional","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","constraints","audio","remap","video","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","then","devices","dev","label","includes","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onError","origGetUserMedia","cs","getAudioTracks","getVideoTracks","getTracks","DOMException","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","width","heightSpecified","height","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","setRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","streams","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","pc","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","addTrack","sender","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","RTCRtpSender","origGetSenders","senders","shimGetStats","origGetStats","getStats","selector","onSucc","onErr","fixChromeStats_","standardReport","report","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","RTCRtpReceiver","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","streamId","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","signalingState","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","setLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","RTCIceCandidate","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","parseFloat","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","catch","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","createOffer","finally","shimCreateAnswer","origCreateAnswer","createAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","addIceCandidate","successCallback","failureCallback","promise","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","iceServers","newIceServers","server","urls","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","offerToReceiveAudio","audioTransceiver","getTransceivers","setDirection","offerToReceiveVideo","videoTransceiver","shimAudioContext","AudioContext","webkitAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","sdpMid","sdpMLineIndex","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","isFirefox","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","createDataChannel","dataChannel","channel","shimConnectionState","checking","iceConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","H264","OPUS","ULPFEC","VP8","VP9","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","FORWARDED_SOURCES_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VideoType","IDENTITY_UPDATED","LOCAL_JID","XMPPEvents","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","FACE_LANDMARK_ADDED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","gum","failedConstraintName","minWidth","minHeight","getResolutionFromFailedConstraint","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","mimeType","supportsVADDetection","supportsRTX","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","reportsQueue","errorData","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","addresses","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","observer","observe","buffered","startTime","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","MediaType","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","isAudioTrack","participantId","getParticipantId","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getSsrcByTrackId","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","JitsiTrackEvents","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","jingleSession","rtc","closeBridgeChannel","participant","getParticipantById","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","_onConferenceRestarted","emuc","doLeave","roomjid","_onIceConnectionFailed","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","performance","isVideoTrack","videoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","ParticipantConnectionStatus","ACTIVE","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","isP2PActive","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","getConference","getProperty","jitsiTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isHiddenFromRecorder","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","getConnectionJid","_connectionJid","setConnectionJid","newJid","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","ljm","workerUrl","workerBlob","Blob","createObjectURL","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","_onIdKeyReady","idKey","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","Caps","disco","rooms","externalFeatures","_addChatRoom","_removeChatRoom","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","rtcstatsEnabled","callstatsDisabled","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","errorIq","prop","getLoginUrl","urlCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","hiddenFromRecorderFeatureEnabled","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","getLastPresence","mucNick","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","FeatureFlags","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","minFrameRate","screen","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","RECVONLY","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","contents","jingle2media","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ENDED","JingleSession","localJid","mediaConstraints","isInitiator","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","MediaSessionEvents","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","jcand","errorMesssage","sendIceCandidates","cands","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","iceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","audioTracks","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","answer","offer","replaceTracks","oldLocalSDP","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","credential","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","createConnection","bosh","deploymentInfo","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFaceExpressionEvent","expression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","getPeerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","sendSourceVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","forwardedSources","videoConstraints","jsonObject","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","attachMediaStream","getStreamID","getTrackID","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","metadata","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackAsMute","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","PRESENTER","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","setSourceName","unmute","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","SignalingLayer","getSSRCOwner","getPeerSourceInfo","getTrackSourceName","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","trackIndex","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","mungedSsrcs","mungedSsrcGroups","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","restoringTimer","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","figureOutStreamingStatus","_onForwardedSourcesChanged","onForwardedSourcesChanged","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","oldStreamingStatus","streamingStatus","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","videoBitrates","encodingBitrates","localStreamEncodingsConfig","_getStreamEncodings","localTrack","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","isNewLocalSource","currentDirection","setEncodings","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_capScreenshareBitrate","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","_initializeDtlsTransport","onstatechange","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_forwardedSources","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","oldForwardedSources","setNewReceiverVideoConstraints","setVideoType","sendSourceVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","isEndpointsFormat","isSourcesFormat","p2pSession","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","getActiveMediaSession","_senderVideoConstraints","idealHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","activeMediaSession","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","click","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","DONE","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","mediaInfo","endpointMediaSource","existingOwner","setTrackMuteStatus","setTrackVideoType","existingName","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_audioSenderLimitReached","_videoSenderLimitReached","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","resourceCreator","isAuthenticatedUser","re","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","videoTypeTagName","trackVideoType","legacyTypeChanged","presenceChanged","audioMuteChanged","videoMuteChanged","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}